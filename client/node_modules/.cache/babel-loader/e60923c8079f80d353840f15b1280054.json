{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\irham\\\\Sandbox\\\\react-project\\\\tutorial-keeptrack\\\\src\\\\projects\\\\ProjectsPage.tsx\",\n    _s = $RefreshSig$();\n\n/*  \r\n    import React from 'react';\r\n    is not required in the latest version(s) \r\n    of React because it uses a new JSX Transform. \r\n    \r\n    With the new JSX Transform, the import statement is only \r\n    needed at the entry point of the application which is \r\n    src\\index.js\r\n*/\nimport React, { useState } from \"react\";\nimport ProjectList from \"./ProjectList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ProjectsPage() {\n  _s();\n\n  // const [projects, setProjects] = useState<Project[]>(MOCK_PROJECTS);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(undefined); // Loading data into API\n\n  useEffect(() => {\n    async function loadProjects() {\n      setLoading(true);\n\n      try {\n        const data = await projectAPI.get(1);\n        setError(\"\");\n        setProjects(data);\n      } catch (e) {\n        if (e instanceof Error) {\n          setError(e.message);\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadProjects();\n  }, []);\n\n  const saveProject = project => {\n    // console.log(\"Saving Project: \", project);\n    let updatedProjects = projects.map(p => {\n      return p.id === project.id ? project : p;\n    });\n    setProjects(updatedProjects);\n  };\n\n  return (\n    /*#__PURE__*/\n    // React Fragment <></> to return multiple root element\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(ProjectList, {\n        projects: projects,\n        onSave: saveProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(ProjectsPage, \"idfVB0Imag/xZeO5+LqD6m37Idk=\");\n\n_c = ProjectsPage;\nexport default ProjectsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectsPage\");","map":{"version":3,"names":["React","useState","ProjectList","ProjectsPage","projects","setProjects","loading","setLoading","error","setError","undefined","useEffect","loadProjects","data","projectAPI","get","e","Error","message","saveProject","project","updatedProjects","map","p","id"],"sources":["C:/Users/irham/Sandbox/react-project/tutorial-keeptrack/src/projects/ProjectsPage.tsx"],"sourcesContent":["/*  \r\n    import React from 'react';\r\n    is not required in the latest version(s) \r\n    of React because it uses a new JSX Transform. \r\n    \r\n    With the new JSX Transform, the import statement is only \r\n    needed at the entry point of the application which is \r\n    src\\index.js\r\n*/\r\nimport { render } from \"@testing-library/react\";\r\nimport React, { useState } from \"react\";\r\nimport { MOCK_PROJECTS } from \"./MockProjects\";\r\nimport { Project } from \"./Project\";\r\nimport ProjectList from \"./ProjectList\";\r\n\r\nfunction ProjectsPage() {\r\n\t// const [projects, setProjects] = useState<Project[]>(MOCK_PROJECTS);\r\n\tconst [projects, setProjects] = useState<Project[]>([]);\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState<string | undefined>(undefined);\r\n\r\n\t// Loading data into API\r\n\tuseEffect(() => {\r\n\t\tasync function loadProjects() {\r\n\t\t\tsetLoading(true);\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await projectAPI.get(1);\r\n\t\t\t\tsetError(\"\");\r\n\t\t\t\tsetProjects(data);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (e instanceof Error) {\r\n\t\t\t\t\tsetError(e.message);\r\n\t\t\t\t}\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tloadProjects();\r\n\t}, []);\r\n\r\n\tconst saveProject = (project: Project) => {\r\n\t\t// console.log(\"Saving Project: \", project);\r\n\t\tlet updatedProjects = projects.map((p: Project) => {\r\n\t\t\treturn p.id === project.id ? project : p;\r\n\t\t});\r\n\t\tsetProjects(updatedProjects);\r\n\t};\r\n\r\n\treturn (\r\n\t\t// React Fragment <></> to return multiple root element\r\n\t\t<>\r\n\t\t\t<h1>Projects</h1>\r\n\r\n\t\t\t{/* Pass the MOCK_PROJECTS array to props */}\r\n\t\t\t<ProjectList projects={projects} onSave={saveProject} />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default ProjectsPage;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,OAAOC,WAAP,MAAwB,eAAxB;;;;AAEA,SAASC,YAAT,GAAwB;EAAA;;EACvB;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAY,EAAZ,CAAxC;EACA,MAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAqBS,SAArB,CAAlC,CAJuB,CAMvB;;EACAC,SAAS,CAAC,MAAM;IACf,eAAeC,YAAf,GAA8B;MAC7BL,UAAU,CAAC,IAAD,CAAV;;MACA,IAAI;QACH,MAAMM,IAAI,GAAG,MAAMC,UAAU,CAACC,GAAX,CAAe,CAAf,CAAnB;QACAN,QAAQ,CAAC,EAAD,CAAR;QACAJ,WAAW,CAACQ,IAAD,CAAX;MACA,CAJD,CAIE,OAAOG,CAAP,EAAU;QACX,IAAIA,CAAC,YAAYC,KAAjB,EAAwB;UACvBR,QAAQ,CAACO,CAAC,CAACE,OAAH,CAAR;QACA;MACD,CARD,SAQU;QACTX,UAAU,CAAC,KAAD,CAAV;MACA;IACD;;IACDK,YAAY;EACZ,CAhBQ,EAgBN,EAhBM,CAAT;;EAkBA,MAAMO,WAAW,GAAIC,OAAD,IAAsB;IACzC;IACA,IAAIC,eAAe,GAAGjB,QAAQ,CAACkB,GAAT,CAAcC,CAAD,IAAgB;MAClD,OAAOA,CAAC,CAACC,EAAF,KAASJ,OAAO,CAACI,EAAjB,GAAsBJ,OAAtB,GAAgCG,CAAvC;IACA,CAFqB,CAAtB;IAGAlB,WAAW,CAACgB,eAAD,CAAX;EACA,CAND;;EAQA;IAAA;IACC;IACA;MAAA,wBACC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADD,eAIC,QAAC,WAAD;QAAa,QAAQ,EAAEjB,QAAvB;QAAiC,MAAM,EAAEe;MAAzC;QAAA;QAAA;QAAA;MAAA,QAJD;IAAA;EAFD;AASA;;GA1CQhB,Y;;KAAAA,Y;AA4CT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}